name: Docker Build and Publish

on:
  release:
    types: [published]

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          cache: true

      - name: Get current date
        id: date
        run: echo "date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: coverage.txt
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            org.opencontainers.image.title=Notidock
            org.opencontainers.image.description=Docker container event notification service
            org.opencontainers.image.version=${{ github.ref_name }}
            org.opencontainers.image.created=${{ steps.date.outputs.date }}
            org.opencontainers.image.revision=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build release executables
        run: |
          # Set common build flags
          BUILD_FLAGS="-trimpath -pgo=auto"
          LDFLAGS="-w -s -X main.Version=${GITHUB_REF_NAME} -X main.Commit=${GITHUB_SHA} -X main.BuildTime=${{ steps.date.outputs.date }} -extldflags=-static"

          # Linux builds
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
            ${BUILD_FLAGS} \
            -ldflags="${LDFLAGS}" \
            -o notidock-linux-amd64

          CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build \
            ${BUILD_FLAGS} \
            -ldflags="${LDFLAGS}" \
            -o notidock-linux-arm64

          # macOS builds
          CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build \
            ${BUILD_FLAGS} \
            -ldflags="${LDFLAGS}" \
            -o notidock-darwin-amd64

          CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build \
            ${BUILD_FLAGS} \
            -ldflags="${LDFLAGS}" \
            -o notidock-darwin-arm64

          # Windows build
          CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build \
            ${BUILD_FLAGS} \
            -ldflags="${LDFLAGS}" \
            -o notidock-windows-amd64.exe

          # Create SHA256 checksums
          sha256sum notidock-* > checksums.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: binaries
          path: |
            notidock-*
            checksums.txt